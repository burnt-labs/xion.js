// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "abstractaccount/v1/account.proto" (package "abstractaccount.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * AbstractAccount is a smart contract that is capable of initiating txs.
 *
 * This account type is similar to BaseAccount except for it doesn't have a
 * pubkey. If a pubkey is needed, it creates and returns a new NilPubKey.
 *
 * @generated from protobuf message abstractaccount.v1.AbstractAccount
 */
export interface AbstractAccount {
  /**
   * @generated from protobuf field: string address = 1;
   */
  address: string;
  /**
   * @generated from protobuf field: uint64 account_number = 2;
   */
  accountNumber: bigint;
  /**
   * @generated from protobuf field: uint64 sequence = 3;
   */
  sequence: bigint;
}
/**
 * NilPubKey is the pubkey type of the AbstractAccount. Basically, it represents
 * a pubkey that doesn't exist.
 *
 * The actual pubkey of an AbstractAccount (if it has one) is to be stored
 * inside the contract, not at the SDK level. Signature verification is also
 * done inside the contract, typically in the BeforeTx hook.
 *
 * @generated from protobuf message abstractaccount.v1.NilPubKey
 */
export interface NilPubKey {
  /**
   * @generated from protobuf field: bytes address_bytes = 1;
   */
  addressBytes: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class AbstractAccount$Type extends MessageType<AbstractAccount> {
  constructor() {
    super(
      "abstractaccount.v1.AbstractAccount",
      [
        {
          no: 1,
          name: "address",
          kind: "scalar",
          T: 9 /*ScalarType.STRING*/,
          options: { "cosmos_proto.scalar": "cosmos.AddressString" },
        },
        {
          no: 2,
          name: "account_number",
          kind: "scalar",
          T: 4 /*ScalarType.UINT64*/,
          L: 0 /*LongType.BIGINT*/,
        },
        {
          no: 3,
          name: "sequence",
          kind: "scalar",
          T: 4 /*ScalarType.UINT64*/,
          L: 0 /*LongType.BIGINT*/,
        },
      ],
      {
        "cosmos_proto.implements_interface": ["cosmos.auth.v1beta1.AccountI"],
        "gogoproto.goproto_getters": false,
        "gogoproto.equal": false,
      },
    );
  }
  create(value?: PartialMessage<AbstractAccount>): AbstractAccount {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.address = "";
    message.accountNumber = 0n;
    message.sequence = 0n;
    if (value !== undefined)
      reflectionMergePartial<AbstractAccount>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AbstractAccount,
  ): AbstractAccount {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string();
          break;
        case /* uint64 account_number */ 2:
          message.accountNumber = reader.uint64().toBigInt();
          break;
        case /* uint64 sequence */ 3:
          message.sequence = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AbstractAccount,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.address);
    /* uint64 account_number = 2; */
    if (message.accountNumber !== 0n)
      writer.tag(2, WireType.Varint).uint64(message.accountNumber);
    /* uint64 sequence = 3; */
    if (message.sequence !== 0n)
      writer.tag(3, WireType.Varint).uint64(message.sequence);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message abstractaccount.v1.AbstractAccount
 */
export const AbstractAccount = new AbstractAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NilPubKey$Type extends MessageType<NilPubKey> {
  constructor() {
    super(
      "abstractaccount.v1.NilPubKey",
      [
        {
          no: 1,
          name: "address_bytes",
          kind: "scalar",
          T: 12 /*ScalarType.BYTES*/,
        },
      ],
      { "gogoproto.goproto_stringer": false },
    );
  }
  create(value?: PartialMessage<NilPubKey>): NilPubKey {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.addressBytes = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<NilPubKey>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: NilPubKey,
  ): NilPubKey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes address_bytes */ 1:
          message.addressBytes = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: NilPubKey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes address_bytes = 1; */
    if (message.addressBytes.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.addressBytes);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message abstractaccount.v1.NilPubKey
 */
export const NilPubKey = new NilPubKey$Type();
